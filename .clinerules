The application's main purpose is to analyze and process 
clipboard content to detect and properly format C# code segments, 
even when they're not explicitly marked as code blocks. 

The first phase was completed: the algorithm to detect code within text blocks. 

Key functionality includes of phase one:
Automatic code detection using an extensive set of regex patterns matching C# syntax elements (classes, methods, properties etc.)
Context-aware analysis that evaluates surrounding lines (previous/next) to improve detection accuracy
Intelligent handling of both explicit code blocks (marked with ```csharp) and implicit code segments in plain text
Segmentation of input text into code/text parts with appropriate Markdown formatting
Configurable detection thresholds via the Config class (using pydantic_settings)
Test suite support through JSON input files containing various test cases
Primary use case: Automatically format mixed content copied from IDEs/documents by identifying and properly enclosing C# code segments in Markdown code blocks.

The second phase is: making the chromium extension. 
The chromium extension can probably not be made using Python.
So let's move the python project into a folder 'python_experiment'.
And let's make the extension inside a folder 'extension' which is next to the python_experiment folder.


# The current Project structure still looks like this
.
├── compare_copied_images.py
├── input_samples.json
├── klembord_detect_csharp.py
├── .clinerules
├── output
│   ├── json
│   │   ├── output.json
│   │   ├── output_prev.json
│   │   └── output_samples.json
│   └── text
│       ├── output.txt
│       └── output_prev.txt
├── requirements.txt
└── test_detect_csharp.py
